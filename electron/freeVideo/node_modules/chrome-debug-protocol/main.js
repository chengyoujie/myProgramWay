var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var http = require("http");
var WebSocket = require("ws");
var event = require("events");
var protocol = require("./protocol.json");
var Chrome;
(function (Chrome) {
    function createDebugger(tab) {
        if (typeof tab === "string") {
            return new Chrome.ChromeDebugger(tab);
        }
        else {
            return new Chrome.ChromeDebugger(tab.webSocketDebuggerUrl);
        }
    }
    Chrome.createDebugger = createDebugger;
    function getTabs(options, callback) {
        var req = http.request(options, function (res) {
            var body = "";
            res.on('data', function (chunk) {
                body += chunk;
            });
            res.on('end', function () {
                callback(JSON.parse(body));
            });
        });
        req.end();
    }
    Chrome.getTabs = getTabs;
    var ChromeDebugger = (function (_super) {
        __extends(ChromeDebugger, _super);
        function ChromeDebugger(websocketUrl) {
            var _this = this;
            _super.call(this);
            this.callbackId = 0;
            this.callbacks = {};
            this.messageRecieved = function (data, flags) {
                var obj = JSON.parse(data);
                if (typeof obj.id !== "undefined") {
                    // When an id is present, this means it is the return value from a method
                    var cb = _this.callbacks[obj.id];
                    if (cb) {
                        if (obj.error) {
                            cb(null, obj.error);
                        }
                        else {
                            cb(obj.result, null);
                        }
                        delete _this.callbacks[_this.callbackId];
                    }
                }
                else {
                    // This is an event
                    _this.emit(obj.method, obj.params);
                }
            };
            this.addProtocol();
            var ws = this.ws = new WebSocket(websocketUrl);
            ws.on("message", this.messageRecieved);
            ws.on("error", function (error) {
                _this.emit("error", error);
            });
        }
        ChromeDebugger.prototype.close = function () {
            this.ws.close();
        };
        ChromeDebugger.prototype.send = function (method, params, callback) {
            var _this = this;
            if (this.ws.readyState == WebSocket.CONNECTING) {
                this.ws.on("open", function () {
                    _this.sendInternal(method, params, callback);
                });
            }
            else {
                this.sendInternal(method, params, callback);
            }
        };
        ChromeDebugger.prototype.sendInternal = function (method, params, callback) {
            this.ws.send(JSON.stringify({ method: method, params: params, id: this.callbackId }));
            this.callbacks[this.callbackId] = callback;
            this.callbackId++;
        };
        ChromeDebugger.prototype.addProtocol = function () {
            var _this = this;
            var domains = protocol.domains;
            for (var i = 0; i < domains.length; i++) {
                var domain = domains[i];
                var domainObject = this[domain.domain] = {};
                domainObject.on = (function (domain) {
                    return function () {
                        _this.on.call(_this, "" + domain.domain + "." + arguments[0], arguments[1]);
                    };
                })(domain);
                var commands = domain.commands;
                if (commands && commands.length > 0) {
                    for (var j = 0; j < commands.length; j++) {
                        this.implementCommand(domain, domainObject, commands[j]);
                    }
                }
            }
        };
        ChromeDebugger.prototype.implementCommand = function (domain, object, command) {
            var _this = this;
            object[command.name] = function (args) {
                var callback;
                if (arguments.length == 1 && typeof arguments[0] == "function") {
                    callback = arguments[0];
                    args = null;
                }
                else {
                    callback = arguments[1];
                }
                _this.send("" + domain.domain + "." + command.name, args, callback);
            };
        };
        return ChromeDebugger;
    })(event.EventEmitter);
    Chrome.ChromeDebugger = ChromeDebugger;
})(Chrome || (Chrome = {}));
module.exports = Chrome;
